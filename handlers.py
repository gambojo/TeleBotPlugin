from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from .keyboards import PluginKeyboardBuilder
from databases import DatabaseManager
from .services.service import Service



class PluginHandlers:
    def __init__(self, config, plugin_name: str, db: DatabaseManager):
        self.config = config
        self.plugin_name = plugin_name
        self.service = Service(db)

    def register(self, router: Router):
        router.callback_query.register(
            self.entry_callback,
            F.data == f"plugin:{self.plugin_name}"
        )

        router.callback_query.register(
            self.bt1,
            F.data == f"{self.plugin_name.lower()}:bt1"
        )

        router.callback_query.register(
            self.bt2,
            F.data == f"{self.plugin_name.lower()}:bt2"
        )

    async def entry_callback(self, callback: CallbackQuery):
        text = "EntryPoint"
        keyboard = PluginKeyboardBuilder(self.config, self.plugin_name).plugin_menu().build_markup()
        await callback.message.edit_caption(caption=text, reply_markup=keyboard, parse_mode="HTML")

    async def bt1(self, callback: CallbackQuery):
        response = await self.service.create(123, 'bt1', 'Buton1')
        text = f"<b>–í–Ω–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ:</b>\nID: {response.id}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {response.title}"
        keyboard = PluginKeyboardBuilder(self.config, self.plugin_name).plugin_menu().build_markup()
        await callback.message.edit_caption(caption=text, reply_markup=keyboard, parse_mode="HTML")


    async def bt2(self, callback: CallbackQuery):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            responses = await self.service.get(123)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
            if responses:
                text_lines = ["<b>–í–Ω–µ—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>"]
                for response in responses:
                    text_lines.append(f"‚Ä¢ ID: {response.id}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {response.title}")
                text = "\n".join(text_lines)
            else:
                text = "üì≠ <b>–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π</b>"

            keyboard = PluginKeyboardBuilder(self.config, self.plugin_name).plugin_menu().build_markup()
            await callback.message.edit_caption(caption=text, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            self.logger.error(f"Error in bt2: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
